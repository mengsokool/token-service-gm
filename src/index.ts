// ЁЯОЙ р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ър╕кр╕╣р╣Ир╣Вр╕ер╕Бр╣Бр╕лр╣Ир╕З IoT Device Token Management! ЁЯМИ
// р╕Цр╣Йр╕▓р╕Др╕╕р╕Ур╣Ар╕Ыр╣Зр╕Щр╣Ар╕Фр╣Зр╕Бр╕Эр╕╢р╕Бр╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╕нр╣Ир╕▓р╕Щр╕нр╕вр╕╣р╣И р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Хр╕▒р╕зр╣Гр╕лр╣Йр╕Юр╕гр╣Йр╕нр╕б р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╕Ир╕░р╣Др╕Ыр╕Ьр╕Ир╕Нр╕ар╕▒р╕вр╣Гр╕Щр╣Вр╕ер╕Бр╕Вр╕нр╕З API р╕Бр╕▒р╕Щ! ЁЯЧ║я╕П

import express from "express";
import { Sequelize, DataTypes, Model } from "sequelize";
import Redis from "ioredis";

// ЁЯОн р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Юр╕нр╕гр╣Мр╕Хр╣Гр╕лр╣Йр╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╕Вр╕нр╕Зр╣Ар╕гр╕▓
// р╕Чр╕│р╣Др╕бр╕Хр╣Йр╕нр╕Зр╣Ар╕Ыр╣Зр╕Щ 6000 р╕ер╣Ир╕░? р╣Др╕бр╣Ир╕гр╕╣р╣Йр╕кр╕┤ р╕нр╕▓р╕Ир╕Ир╕░р╣Ар╕Юр╕гр╕▓р╕░р╕бр╕▒р╕Щр╕Яр╕▒р╕Зр╕Фр╕╣р╣Ар╕Чр╣Ир╕Фр╕╡! ЁЯШО
const port = 6000;
const app = express();
app.use(express.json());

// ЁЯРШ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Бр╕▒р╕Ъ PostgreSQL
// р╕Чр╕│р╣Др╕бр╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Й Postgres? р╣Ар╕Юр╕гр╕▓р╕░р╕бр╕▒р╕Щр╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Кр╣Йр╕▓р╕Зр╕вр╕▒р╕Зр╣Др╕Зр╕ер╣Ир╕░! р╣Гр╕лр╕Нр╣И, р╣Бр╕Вр╣Зр╕Зр╣Бр╕гр╕З, р╣Бр╕ер╕░р╕Ир╕│р╕нр╕░р╣Др╕гр╣Др╕Фр╣Йр╣Ар╕вр╕нр╕░р╣Бр╕вр╕░ ЁЯРШЁЯТк
const sequelize = new Sequelize("mydatabase", "myuser", "mypassword", {
  host: "localhost",
  dialect: "postgres",
  port: 5455,
});

// ЁЯЪА р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Бр╕▒р╕Ъ Redis
// Redis р╣Ар╕гр╣Зр╕зр╕бр╕▓р╕Б! р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Хр╕нр╕Щр╕Чр╕╡р╣Ир╣Бр╕бр╣Ир╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕лр╣Йр╣Др╕Ыр╕Бр╕┤р╕Щр╕Вр╣Йр╕▓р╕з р╣Ар╕гр╕▓р╕зр╕┤р╣Ир╕Зр╣Др╕Ыр╣Ар╕гр╣Зр╕зр╕Вр╕Щр╕▓р╕Фр╣Др╕лр╕Щ? р╣Ар╕гр╣Зр╕зр╣Бр╕Ър╕Ър╕Щр╕▒р╣Йр╕Щр╣Бр╕лр╕ер╕░! ЁЯПГтАНтЩВя╕ПЁЯТи
const redis = new Redis({
  host: "localhost",
  port: 6355,
});

// ЁЯОн р╕кр╕гр╣Йр╕▓р╕З interface р╕кр╕│р╕лр╕гр╕▒р╕Ъ Token
// р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Хр╕нр╕Щр╕Чр╕╡р╣Ир╣Ар╕гр╕▓р╕зр╕▓р╕Фр╕ар╕▓р╕Юр╣Гр╕Щр╕Ир╕┤р╕Щр╕Хр╕Щр╕▓р╕Бр╕▓р╕гр╕зр╣Ир╕▓р╣Ар╕гр╕▓р╕нр╕вр╕▓р╕Бр╣Гр╕лр╣Й Token р╕лр╕Щр╣Йр╕▓р╕Хр╕▓р╣Ар╕Ыр╣Зр╕Щр╕вр╕▒р╕Зр╣Др╕З
interface TokenAttributes {
  token: string;
  createdAt?: Date;
  updatedAt?: Date;
}

// ЁЯж╕тАНтЩВя╕П р╕кр╕гр╣Йр╕▓р╕З Model р╕кр╕│р╕лр╕гр╕▒р╕Ъ Token
// р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╕Лр╕╣р╣Ар╕Ыр╕нр╕гр╣Мр╕ор╕╡р╣Вр╕гр╣Ир╕Вр╕нр╕Зр╣Ар╕гр╕▓! р╣Ар╕Вр╕▓р╕Ир╕░р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ъ Token р╣Гр╕лр╣Йр╣Ар╕гр╕▓
class Token extends Model<TokenAttributes> implements TokenAttributes {
  public token!: string;
  public readonly createdAt!: Date;
  public readonly updatedAt!: Date;
}

// ЁЯПЧя╕П р╕Бр╕│р╕лр╕Щр╕Фр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕нр╕Зр╕Хр╕▓р╕гр╕▓р╕З Token р╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
// р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╣Йр╕▓р╕Щр╣Гр╕лр╣Й Token р╕нр╕вр╕╣р╣Ир╕вр╕▒р╕Зр╣Др╕Зр╕ер╣Ир╕░! ЁЯПа
Token.init(
  {
    token: {
      type: DataTypes.STRING,
      allowNull: false,
      primaryKey: true,
    },
  },
  {
    sequelize,
    modelName: "Token",
  }
);

// ЁЯПЧя╕П р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е (р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡)
// р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╣Зр╕Др╕зр╣Ир╕▓р╕Ър╣Йр╕▓р╕Щр╕Вр╕нр╕З Token р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕гр╣Зр╕Ир╕гр╕╢р╕вр╕▒р╕З р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╕Бр╣Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╣Йр╣Ар╕ер╕в!
sequelize.sync();

// ЁЯОЯя╕П р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щ Token
app.post('/register', async (req, res) => {
  try {
    const token = req.body.token; // р╕гр╕▒р╕Ър╕Др╣Ир╕▓ Token р╕Ир╕▓р╕Б body р╕Вр╕нр╕З request
    console.log(token);

    // ЁЯХ╡я╕ПтАНтЩВя╕П р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ Token р╕бр╕▓р╕Фр╣Йр╕зр╕вр╕гр╕╢р╣Ар╕Ыр╕ер╣Ир╕▓
    if (!token) {
      return res.status(400).json({ error: 'Token is required' }); // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ р╕Бр╣Зр╕Ър╕нр╕Бр╕зр╣Ир╕▓ "р╣Ар╕ор╣Йр╕в! р╕ер╕╖р╕бр╕нр╕░р╣Др╕гр╕бр╕▓р╕Ыр╣Ир╕░?"
    }

    // ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ Token р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕╢р╕вр╕▒р╕З
    const tokenExists = await Token.findOne({ where: { token } });
    if (tokenExists) {
      // ЁЯФД р╕Цр╣Йр╕▓р╕бр╕╡р╣Бр╕ер╣Йр╕з р╕Бр╣Зр╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╣Ар╕зр╕ер╕▓р╣Гр╕лр╣Йр╕лр╕Щр╣Ир╕нр╕в
      await tokenExists.update({ updatedAt: new Date() });
    } else {
      // тЬи р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡ р╕Бр╣Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣Ир╣Ар╕ер╕в!
      await Token.create({ token });
    }

    // ЁЯЪА р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б Token р╕ер╕Зр╣Гр╕Щ Redis р╕Фр╣Йр╕зр╕в
    // р╕Чр╕│р╣Др╕бр╕Хр╣Йр╕нр╕Зр╣Ар╕Бр╣Зр╕Ър╣Гр╕Щ Redis р╕Фр╣Йр╕зр╕в? р╣Ар╕Юр╕гр╕▓р╕░р╕бр╕▒р╕Щр╣Ар╕гр╣Зр╕зр╣Др╕З! р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕Ир╕Фр╣Вр╕Щр╣Йр╕Хр╣Др╕зр╣Йр╣Гр╕Щр╕кр╕бр╕нр╕Зр╣Ар╕ер╕в!
    await redis.set(token, 'true');
    
    // ЁЯОЙ р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ир╣Йр╕Зр╕Ьр╕ер╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕лр╕гр╕╖р╕нр╕нр╕▒р╕Юр╣Ар╕Фр╕Х Token
    return res.json({ message: 'Token created or updated successfully', token });
  } catch (error: any) {
    // ЁЯЪи р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф
    if (error.name === 'SequelizeUniqueConstraintError') {
      return res.status(400).json({ error: 'Token already exists' });
    }
  }
}) 

// ЁЯХ╡я╕ПтАНтЩВя╕П р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Token
app.get("/verify/:token", async (req, res) => {
  const token = req.params.token; // р╕гр╕▒р╕Ър╕Др╣Ир╕▓ Token р╕Ир╕▓р╕Б URL

  // ЁЯзР р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ Token р╕бр╕▓р╕Фр╣Йр╕зр╕вр╕гр╕╢р╣Ар╕Ыр╕ер╣Ир╕▓
  if (!token) {
    return res.status(400).json({ error: "Token is required" }); // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ р╕Бр╣Зр╕Ър╕нр╕Бр╕зр╣Ир╕▓ "р╣Ар╕ор╣Йр╕в! р╕ер╕╖р╕бр╕нр╕░р╣Др╕гр╕бр╕▓р╕Ыр╣Ир╕░?"
  }

  try {
    // ЁЯЪА р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Гр╕Щ Redis р╕Бр╣Ир╕нр╕Щ р╣Ар╕Юр╕гр╕▓р╕░р╕бр╕▒р╕Щр╣Ар╕гр╣Зр╕зр╕Бр╕зр╣Ир╕▓!
    const existsInRedis = await redis.exists(token);
    if (existsInRedis) {
      return res.json({ allow: true }); // р╕Цр╣Йр╕▓р╣Ар╕Ир╕нр╣Гр╕Щ Redis р╕Бр╣Зр╣Гр╕лр╣Йр╕Ьр╣Ир╕▓р╕Щр╣Ар╕ер╕в!
    }

    // ЁЯРШ р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕нр╣Гр╕Щ Redis р╕Бр╣Зр╣Др╕Ыр╕Хр╕▓р╕бр╕лр╕▓р╣Гр╕Щ Postgres
    const tokenExists = await Token.findOne({where: { token: token }});
    if (tokenExists) {
      await redis.set(token, "true"); // р╣Ар╕Ир╕нр╣Бр╕ер╣Йр╕зр╕Бр╣Зр╣Ар╕Бр╣Зр╕Ър╣Др╕зр╣Йр╣Гр╕Щ Redis р╕Фр╣Йр╕зр╕в р╕Ир╕░р╣Др╕Фр╣Йр╣Ар╕гр╣Зр╕зр╕Вр╕╢р╣Йр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕лр╕Щр╣Йр╕▓
      return res.json({ allow: true }); // р╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╣Гр╕лр╣Йр╕Ьр╣Ир╕▓р╕Щ!
    }

    // ЁЯЪл р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕нр╕Чр╕╡р╣Ир╣Др╕лр╕Щр╣Ар╕ер╕в р╕Бр╣Зр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕Ьр╣Ир╕▓р╕Щ!
    return res.json({ allow: false });
  } catch (error) {
    console.error("Error checking token:", error); // р╣Вр╕нр╣Кр╕░р╣Вр╕н! р╕бр╕╡р╕нр╕░р╣Др╕гр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф
    res.status(500).json({ error: "Internal server error" }); // р╕Ър╕нр╕Бр╕зр╣Ир╕▓р╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓
  }
});

// ЁЯЧСя╕П р╕ер╕Ъ Token
app.delete("/invoke/:token", async (req, res) => {
  const token = req.params.token; // р╕гр╕▒р╕Ър╕Др╣Ир╕▓ Token р╕Ир╕▓р╕Б URL

  // ЁЯзР р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ Token р╕бр╕▓р╕Фр╣Йр╕зр╕вр╕гр╕╢р╣Ар╕Ыр╕ер╣Ир╕▓
  if (!token) {
    return res.status(400).json({ error: "Token is required" }); // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ р╕Бр╣Зр╕Ър╕нр╕Бр╕зр╣Ир╕▓ "р╣Ар╕ор╣Йр╕в! р╕ер╕╖р╕бр╕нр╕░р╣Др╕гр╕бр╕▓р╕Ыр╣Ир╕░?"
  }

  try {
    // ЁЯЧСя╕П р╕ер╕Ъ Token р╕Ир╕▓р╕Бр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    const result = await Token.destroy({ where: { token } });
    if (result > 0) {
      await redis.del(token); // р╕ер╕Ър╕Ир╕▓р╕Б Redis р╕Фр╣Йр╕зр╕в
      return res.json({ message: "Token deleted successfully" }); // р╣Бр╕Ир╣Йр╕Зр╕зр╣Ир╕▓р╕ер╕Ър╕кр╕│р╣Ар╕гр╣Зр╕И
    } else {
      return res.status(404).json({ error: "Token not found" }); // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕н Token р╕Бр╣Зр╕Ър╕нр╕Бр╕зр╣Ир╕▓р╕лр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕н
    }
  } catch (error) {
    console.error("Error deleting token:", error); // р╣Вр╕нр╣Кр╕░р╣Вр╕н! р╕бр╕╡р╕нр╕░р╣Др╕гр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф
    res.status(500).json({ error: "Internal server error" }); // р╕Ър╕нр╕Бр╕зр╣Ир╕▓р╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓
  }
});

// ЁЯЪи р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н Redis
redis.on("error", (error) => {
  console.error("Redis connection error:", error);
});

// ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣М
app.listen(port, () => {
  console.log(`ЁЯОЙ р╣Ар╕вр╣Й! р╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╕Вр╕нр╕Зр╣Ар╕гр╕▓р╕Чр╕│р╕Зр╕▓р╕Щр╣Бр╕ер╣Йр╕зр╕Чр╕╡р╣Ир╕Юр╕нр╕гр╣Мр╕Х ${port}`);
});

// ЁЯОУ р╣Ар╕Бр╕гр╣Зр╕Фр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Й:
// 1. р╕Чр╕│р╣Др╕бр╣Ар╕гр╕▓р╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕З Postgres р╣Бр╕ер╕░ Redis?
//    - Postgres р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Цр╕▓р╕зр╕г р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Ар╕Бр╣Зр╕Ър╕Вр╕нр╕Зр╣Гр╕Щр╕Хр╕╣р╣Йр╣Ар╕кр╕╖р╣Йр╕нр╕Ьр╣Йр╕▓
//    - Redis р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Кр╕▒р╣Ир╕зр╕Др╕гр╕▓р╕з р╣Ар╕гр╣Зр╕зр╕бр╕▓р╕Б р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Ар╕Бр╣Зр╕Ър╕Вр╕нр╕Зр╣Гр╕Щр╕Бр╕гр╕░р╣Ар╕Ыр╣Лр╕▓р╕Бр╕▓р╕Зр╣Ар╕Бр╕З

// 2. р╕Чр╕│р╣Др╕бр╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Й async/await?
//    - р╣Ар╕Юр╕гр╕▓р╕░р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Бр╕▒р╕Ър╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓ р╣Ар╕гр╕▓р╣Ар╕ер╕вр╕Ър╕нр╕Бр╣Вр╕Др╣Йр╕Фр╕зр╣Ир╕▓ "р╕гр╕нр╣Бр╕Ыр╣Кр╕Ър╕Щр╕░" ЁЯШ┤

// 3. р╕Чр╕│р╣Др╕бр╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Й try/catch?
//    - р╣Ар╕Юр╕гр╕▓р╕░р╕Ър╕▓р╕Зр╕Чр╕╡р╕Бр╣Зр╕бр╕╡р╕нр╕╕р╕Ър╕▒р╕Хр╕┤р╣Ар╕лр╕Хр╕╕р╣Ар╕Бр╕┤р╕Фр╕Вр╕╢р╣Йр╕Щр╣Др╕Фр╣Й р╣Ар╕гр╕▓р╕Хр╣Йр╕нр╕Зр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Хр╕▒р╕зр╕гр╕▒р╕Ър╕бр╕╖р╕н! ЁЯж║

// 4. р╕Чр╕│р╣Др╕б Token р╕Хр╣Йр╕нр╕Зр╣Ар╕Ыр╣Зр╕Щ string?
//    - р╣Ар╕Юр╕гр╕▓р╕░р╕бр╕▒р╕Щр╕вр╕╖р╕Фр╕лр╕вр╕╕р╣Ир╕Щр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф! р╕Ир╕░р╣Гр╕кр╣Ир╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г р╕Хр╕▒р╕зр╣Ар╕ер╕В р╕лр╕гр╕╖р╕нр╕кр╕▒р╕Нр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╕нр╕░р╣Др╕гр╕Бр╣Зр╣Др╕Фр╣Й ЁЯОи

// 5. р╕Чр╕│р╣Др╕бр╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Й Express?
//    - р╣Ар╕Юр╕гр╕▓р╕░р╕бр╕▒р╕Щр╕Чр╕│р╣Гр╕лр╣Йр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З API р╕Зр╣Ир╕▓р╕вр╕Вр╕╢р╣Йр╕Щ р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕бр╕╡р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕зр╕вр╕▒р╕Зр╣Др╕Зр╕ер╣Ир╕░! ЁЯж╕тАНтЩВя╕П